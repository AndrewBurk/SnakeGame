from training_env.Field import Field
from Snake.SnakeControl import *
from pyann import *


s = [-4.74747221e-01,  1.42612614e-01,  1.32680244e-01, -9.99999778e-01,
       -3.85426269e-03,  6.09883986e-01,  8.24871064e-01, -4.93097674e-01,
       -3.73269212e-02,  4.01096605e-01,  9.53121389e-02, -7.23231064e-01,
        3.80494121e-02,  4.41808685e-01, -6.71765732e-01,  1.02464024e-01,
        6.62629621e-01,  5.26934453e-01, -2.09221671e-01,  9.98071901e-01,
        7.48503987e-01, -3.62109087e-01, -9.07401164e-01, -2.53406206e-01,
        1.54417485e-01,  3.37496238e-01, -7.42130716e-01, -9.96811167e-01,
       -8.71759626e-01, -6.00250131e-01,  3.08615980e-01, -9.85809071e-01,
       -3.01441417e-01, -9.99901856e-01, -8.65675934e-01, -9.16165986e-01,
        3.00005593e-02, -9.19998584e-01,  4.63060011e-01, -8.75218457e-01,
       -5.65593476e-01, -6.62290774e-01, -7.29574054e-01,  4.55947638e-01,
        6.44287256e-01, -4.47462593e-01, -1.84167867e-01,  4.43438983e-01,
       -2.78011242e-01, -6.22938574e-01,  9.47889561e-01, -1.06005156e-02,
        7.16665753e-01, -8.91074315e-01, -1.77760437e-01, -7.53600788e-01,
       -2.16108656e-01, -5.15418493e-01,  5.47676319e-02, -8.11352139e-01,
        2.13122824e-01,  9.48509401e-01, -9.58918257e-01, -9.99999778e-01,
       -1.27519661e-01, -4.52867126e-01, -9.99909559e-01, -4.45391684e-01,
        1.47190225e-02,  2.98728436e-01, -9.84725319e-01, -8.66646129e-01,
       -5.95712280e-01, -5.24393442e-01,  9.87994074e-01,  8.00972317e-01,
        2.00329852e-01, -7.22086348e-01, -8.65017322e-01, -8.90051930e-01,
       -6.75420847e-01, -6.84076102e-01,  4.21788849e-01, -5.98227550e-01,
        1.33053789e-02,  6.30129737e-01, -9.96473751e-01,  5.09254179e-01,
       -7.66241004e-03,  7.21743900e-01, -6.14522422e-01,  9.22501588e-01,
       -8.94174430e-01,  6.38583150e-01,  5.73511053e-01, -9.99999942e-01,
       -2.46949104e-01,  8.66162985e-01,  2.14239718e-01,  3.95846866e-01,
        7.51391165e-01, -7.53876505e-01,  4.85592131e-02,  2.85026416e-01,
        9.01868568e-01, -2.49807574e-01, -7.95726938e-01, -3.72908469e-01,
        9.99727006e-01, -4.78589782e-01,  6.65894225e-01,  1.74737909e-01,
        9.99949981e-01,  2.83551510e-01,  8.42563346e-01, -7.39084599e-01,
        5.09491575e-01,  9.19312861e-01,  6.26031103e-01,  2.11120268e-01,
        8.87645072e-01, -7.78684992e-01, -9.94338954e-01, -3.21553265e-01,
       -2.79496914e-01,  8.58837974e-01,  9.99874850e-01,  8.42878864e-01,
       -2.38983926e-01,  5.51975047e-01,  6.18323062e-01,  4.25291440e-01,
       -1.81541559e-01,  3.12265421e-01,  8.76674227e-01, -3.36873294e-01,
        6.31580088e-02,  1.73968903e-01,  1.94030220e-01,  5.30236504e-01,
        8.07162848e-01,  5.77407265e-01,  7.74659274e-01,  8.07624117e-01,
       -7.10541313e-01, -2.84886852e-03, -7.41559928e-01,  1.16300095e-01,
       -4.78950445e-01,  6.15116169e-01,  1.16310799e-01,  2.86235661e-01,
       -9.96470688e-01, -6.01489375e-02, -4.10806990e-01,  4.64091539e-01,
        9.04318509e-01, -9.95787397e-01, -4.83754817e-01, -8.06898371e-01,
        3.08849819e-01, -3.34737079e-01,  5.01296401e-01, -9.56200446e-01,
        7.95347470e-01,  4.02190638e-01, -1.11243941e-01,  3.68234643e-01,
       -9.88831075e-01,  1.24857321e-01, -2.08796853e-01,  9.31182956e-01,
       -9.11358592e-01, -9.87682475e-01, -3.74248129e-01,  6.44137766e-02,
        6.19222073e-01,  3.34828407e-01, -6.93766023e-01, -9.86756923e-01,
        5.88768159e-02,  9.96500898e-01, -5.51484351e-01,  9.96572983e-01,
        1.69916315e-01, -7.02870397e-01, -4.28908126e-02,  5.34598775e-01,
       -7.01095017e-02, -7.01081420e-01,  8.33477179e-01,  2.47831447e-01,
       -9.89760388e-01, -9.99651363e-01,  9.31439941e-01,  6.65849294e-01,
        4.97069418e-01,  3.64062159e-02, -9.98590449e-01,  9.17742803e-01,
       -9.96491944e-01,  2.64618990e-01,  9.39083464e-01,  6.34843266e-01,
        9.99904237e-01, -4.69214055e-01, -7.47818695e-02,  4.98368700e-01,
       -5.26573319e-01, -7.68535042e-01,  9.97167981e-01, -1.50414148e-01,
       -1.13513854e-01, -8.76504843e-01, -2.23858836e-01,  2.73915147e-01,
        5.31334729e-01,  2.44175989e-01,  9.28765280e-01,  1.66505014e-01,
       -6.46689399e-01,  9.89290292e-01, -9.99975898e-01, -9.42490688e-01,
       -7.63203019e-01, -5.18928995e-01,  9.84263404e-02, -9.67572525e-01,
        3.07042645e-01, -8.58934396e-01,  9.91826608e-01, -4.99996582e-01,
        4.98232408e-01,  9.42322109e-01,  4.22619557e-02, -8.39726171e-01,
        9.77580023e-01,  5.80108343e-01,  9.95625969e-01,  7.77950485e-01,
        4.82267063e-01, -2.88232021e-01, -9.68251926e-01,  9.77377836e-01,
        9.96721781e-01,  4.14355922e-01,  4.11697452e-01, -4.37373500e-02,
       -2.54578839e-01,  6.56652337e-01, -9.12390387e-01, -5.82883653e-01,
        6.20645780e-01, -2.35916922e-01, -8.06222683e-01, -9.15196863e-01,
       -9.47739523e-01, -5.48668965e-01,  3.14754639e-01,  4.86720009e-01,
        1.43897271e-01, -1.28445343e-01, -8.04646074e-01, -2.68353558e-01,
       -1.77664087e-01,  1.57815184e-01,  1.45532010e-01, -1.80599757e-01,
       -7.84433057e-02,  4.64726317e-01,  6.58211390e-01,  5.26623221e-01,
       -3.11262817e-02,  4.84569480e-01,  4.76442197e-01,  4.44427288e-01,
        2.94973989e-01, -1.05925706e-01, -9.54023389e-01,  6.41863160e-01,
        8.41749612e-01,  6.81815505e-01,  5.80151810e-01,  9.40817702e-01,
        6.35745000e-01, -5.11131411e-01, -2.44432323e-01,  3.72045570e-02,
        9.97929007e-01, -3.28753342e-01,  3.50516489e-01, -3.85817458e-01,
       -8.19380928e-01, -7.00876011e-01,  4.57956317e-01, -3.74952534e-01,
        8.99770202e-01,  3.14614345e-01, -9.37660527e-01,  6.75995753e-01,
       -9.31722202e-02, -6.06159176e-01,  6.18680225e-02, -6.16579449e-01,
        5.30069472e-01, -3.63986377e-01,  7.41308514e-01, -7.81826125e-01,
       -1.23170824e-01, -8.53030031e-01,  1.43571159e-02,  8.68033182e-01,
       -5.45995435e-01, -6.69576796e-01, -6.95480581e-01,  9.81024521e-01,
       -3.30575847e-01, -7.33128630e-01,  3.52248806e-01,  6.02870315e-01,
       -9.89075316e-01, -2.30737610e-01,  7.95661270e-01,  6.04945672e-01,
        4.67327509e-01, -1.62280521e-01, -8.80778500e-01, -5.34048042e-01,
       -8.48921805e-01, -2.90041559e-01, -3.88082744e-01, -9.99136267e-01,
       -5.99060745e-01, -7.84066849e-01, -4.48101147e-01,  9.40603772e-01,
        1.64962165e-01,  4.42108576e-01, -3.32540155e-01,  9.99946647e-01,
       -5.24421404e-01, -3.97056143e-01, -3.72817612e-01,  7.32118279e-01,
       -4.20556650e-01, -3.09711457e-01,  9.55985236e-01, -4.66782586e-01,
        6.97804424e-01,  1.42110466e-01,  7.86513759e-01, -5.40410070e-01,
        4.02086601e-01,  9.47673243e-01, -9.99211854e-01,  8.13840555e-01,
        6.81053450e-01, -7.13226811e-01,  3.93906348e-01, -3.26853766e-01,
        5.59762901e-02, -2.55099677e-01, -4.64310462e-01,  7.52279584e-01,
        8.60990114e-01,  8.41313413e-01,  1.96294981e-01,  9.88742052e-01,
        5.46012242e-01,  7.95781200e-01, -6.68453877e-01,  4.59758185e-01,
       -9.98425004e-01,  9.99991358e-01, -9.89372706e-01, -5.86834681e-01,
       -4.94680047e-02, -2.48661344e-01, -8.62460060e-01,  8.84517359e-01,
        9.93801300e-01, -3.32308361e-01, -9.55831905e-01,  8.14632294e-02,
        2.84188011e-01, -5.61831246e-02, -6.95418868e-01,  6.27364588e-01,
        6.65672142e-01, -4.28349980e-01, -6.50580985e-01, -6.85913344e-01,
       -7.44198468e-01, -1.27125918e-02,  6.56668973e-01, -5.20141198e-01,
        9.51489571e-01, -6.32829112e-01, -9.98492330e-01, -9.99999999e-01,
       -3.43233593e-01, -4.96882101e-01,  9.95389454e-01,  3.16956783e-01,
       -4.70186715e-02,  5.03185184e-01, -8.17700509e-01,  5.08977868e-01,
       -6.06486551e-01,  8.80226978e-01, -5.34288892e-01,  3.36393521e-01,
       -6.45841174e-02, -5.30413226e-01, -1.02318954e-01, -8.69027395e-01,
        4.34744099e-01, -8.01538964e-02, -6.93985850e-01, -3.41218007e-01,
       -4.34428755e-01, -5.82902257e-01, -4.61018225e-01,  2.30361493e-01,
       -2.16432020e-01, -9.95003504e-01, -1.77491608e-01, -3.45795905e-01,
       -5.45183350e-01,  7.08192208e-01, -8.63862231e-02, -6.64844331e-01,
        4.22243646e-01, -9.91052081e-01,  4.05873695e-01, -6.75679444e-01,
        9.70619190e-01,  1.74372332e-01, -5.41174341e-01, -9.99979819e-01,
        3.78374094e-01,  6.41762498e-01,  2.53546330e-01, -7.96972620e-01,
       -3.01140968e-01, -9.99990060e-01,  1.79897687e-01,  2.36001150e-01,
        9.90398444e-01, -1.52042654e-01,  1.55258325e-01, -5.35145130e-02,
        1.56956353e-01,  8.69420512e-01, -1.53043864e-01, -6.78026830e-01,
       -1.37949359e-01, -9.60981409e-01, -7.38472985e-01,  7.49023717e-01,
       -9.82369365e-01,  4.15017534e-01, -3.54165445e-01,  4.35200496e-02,
       -7.57166597e-01,  4.95018990e-01,  1.04615349e-01,  2.08337651e-01,
        3.15674304e-01, -6.69407403e-01, -9.82792785e-01, -2.84305646e-01,
        3.56898375e-02, -1.18150075e-02, -6.11239988e-01, -1.21884968e-01,
       -4.81902339e-01, -4.12887904e-01,  9.26316040e-01, -6.68540618e-01,
        5.37779464e-01,  9.65893611e-01,  3.45741316e-01,  6.42213887e-01,
        7.02490209e-01,  4.36119298e-01,  8.20474584e-01, -8.49245768e-01,
       -8.11605006e-01, -6.43447910e-01, -3.32487539e-01,  3.34037187e-01,
       -8.80431424e-01,  9.97019031e-01, -9.83905912e-01,  2.67907298e-01,
        6.62380884e-02,  2.95994643e-01, -5.73227875e-03, -4.08833141e-01,
       -9.73805552e-01,  7.50255024e-01, -4.86180398e-01, -2.96100296e-01,
        9.03544564e-01,  3.55199667e-01, -3.77728001e-01,  3.83158038e-01,
       -9.99999574e-01,  9.05226884e-01,  1.00202764e-01, -8.70083807e-01,
       -1.08041543e-01,  9.75614042e-01,  3.47789537e-02,  2.19547035e-02,
       -2.87926839e-01, -6.15929632e-01, -9.60686977e-01, -9.99107948e-01,
        2.07617575e-01,  7.18797456e-01,  8.02808298e-01,  8.27841426e-01,
       -7.13413584e-01, -2.54427211e-01, -9.88245859e-01,  1.44505553e-01,
       -5.70548389e-01, -3.88199786e-01,  7.21695051e-01, -7.39222522e-01,
        3.19069849e-01, -3.41745644e-01,  2.17912144e-01,  9.68643726e-01,
       -6.30482682e-01,  1.00000000e+00, -4.53635796e-01,  1.31804109e-01,
       -3.00668734e-01, -8.80191457e-01, -2.68048964e-02,  4.11542029e-02,
       -2.27492663e-01,  8.80070598e-01,  3.98910368e-03,  3.29433907e-01,
       -5.26381227e-01,  1.74593125e-02,  8.00753521e-01, -3.98018755e-01,
        5.50992047e-01, -3.04330739e-01,  9.66404648e-01,  7.86830126e-01,
        5.17267549e-01, -3.93723325e-01,  5.23089671e-01,  4.96393303e-01,
        1.85999358e-01, -4.68195912e-01,  1.88158452e-01,  4.34482901e-01,
       -8.69130267e-01, -4.57616722e-01,  5.18015461e-01,  3.38658237e-01,
        3.10238683e-01,  3.22957378e-01,  1.77318626e-01,  8.05235270e-01,
       -8.31431568e-04, -1.14000783e-01, -8.60497529e-01,  3.60524509e-01,
       -5.54600265e-01, -1.22820842e-02, -7.10110848e-02,  7.83663689e-01,
        7.82637004e-01, -9.23243459e-01,  8.95685746e-01,  5.91704688e-01,
       -8.92542980e-01, -8.89419718e-01,  9.06786515e-02, -9.79488533e-01,
        3.28485584e-01, -7.91312482e-02,  7.81658545e-01, -8.82690561e-01,
       -7.60711461e-01,  5.62084103e-01, -4.10430201e-01,  6.63949131e-01,
        2.41905952e-01, -1.97932725e-01, -7.43052773e-01,  2.81145739e-01,
        1.35742646e-01,  2.76322194e-01,  5.34380713e-01,  7.14608376e-01,
       -8.31369651e-02,  9.99657569e-01,  7.56831376e-01,  1.81317050e-01,
        5.78201879e-01,  4.28636348e-01, -2.18366795e-01,  1.48696270e-01,
       -9.48678107e-01,  4.17235415e-01, -6.89336157e-01, -9.65627511e-01,
        5.88025930e-01,  6.79100916e-01, -2.74148451e-01, -2.76263959e-01,
       -2.99768677e-02,  9.21877382e-01, -9.86816684e-01,  1.97193470e-01,
       -1.62442271e-01,  2.52545762e-01, -6.40030083e-01,  4.64815401e-01,
        9.79225290e-01, -5.79147996e-01, -7.55011840e-01,  6.02100748e-01,
       -4.96324068e-01, -9.46154515e-01, -1.85748680e-01,  5.78842626e-01,
        8.30585957e-01, -9.96177504e-01, -7.39783767e-01,  8.58370776e-01,
        9.01333213e-01,  4.75069783e-01,  6.30761054e-01, -8.44867470e-01,
       -8.61770823e-01, -8.61216801e-01, -4.34542507e-01,  8.70922307e-01,
        7.28101481e-01,  1.06045105e-01, -7.32165258e-01, -5.84716457e-01,
        2.52913652e-01,  6.25930681e-01, -5.02624424e-01, -3.43796244e-01,
        2.74255215e-01, -5.28563364e-01,  2.49675802e-01,  7.80950160e-01,
       -8.36931087e-02, -7.60351144e-01, -4.59663183e-01, -4.82942458e-01,
       -2.23378614e-01, -3.76910917e-01, -3.87403849e-01, -7.68332352e-01,
        9.84802450e-01, -3.02056206e-01, -6.36759715e-01, -3.71119524e-01,
        7.03926709e-01, -8.16442924e-01, -8.82792527e-02]

SNAKE_COUNT = 500
CUT_OFF = 0.46
WEIDTH = 200
HEIGHT = 200

SHAPE_NETURAL_NETWORK = (26, 16, 12, 3)
ACTIVATION_FUNCTION = 'RELu'

def fitness(par):
    l = par[0]
    t = par[1]
    d = par[2]

    # c = par[3] # number of changed direction
    #return (l ** 2) * t * c - (5 * t if (d == 'w' and d != 'c') else t * 0.5)
    # return 10 * l ** 6 + t - (t ** 2) / (l - 2) ** 3
    return (t + (2 ** (l-2) + 500 * (l-2) ** 2.1) - ((l-2)**1.2 * (0.25 * t) ** 1.3)) #* (0.8 if d == 'c' else 1)

def main():
    f1 = Field(WEIDTH, HEIGHT, 20, False)

    # f1.add_elements(HumanMove())
    for i in range(SNAKE_COUNT):
        f1.add_elements(ANNMove(CUT_OFF, SHAPE_NETURAL_NETWORK, ACTIVATION_FUNCTION, True))
    f1.run()
    p = Population(fitness, f1.get_chromosomes())
    print(f'Gen0 CoutCH {p.get_len_generation()} SumFiness {int(p.get_sum_fitness())} avrTime {round(p.get_avr_time(), 2)} maxTime {p.get_max_time()} avrLen {round(p.get_avr_len(), 3)} maxLen {p.get_max_len()} {p.count_death()}')

    ga = GeneticAlgorithm(p, 1, 0.11, [SBX(), SPBX()], [GaussianMutation(), BinaryMutation()])
    for gen_n in range(100000):
        child = ga.get_childs()
        f1.clear()

        for c in child:
            f1.add_elements(ANNMove(CUT_OFF, SHAPE_NETURAL_NETWORK, ACTIVATION_FUNCTION, True, c))
        f1.run(speed=0.00005)

        f = open("stat.txt", 'w+')
        f.write(f'\n {Population(fitness,f1.get_chromosomes())[0]}')

        #kids_parents = Population(fitness, p[:198] + f1.get_chromosomes())
        #f1.clear()
        #for c in kids_parents:
        #    f1.add_elements(ANNMove(CUT_OFF, SHAPE_NETURAL_NETWORK, ACTIVATION_FUNCTION, True, list(c[0])))
        #f1.run(speed=0.00005)

        ga.add_population(Population(fitness,f1.get_chromosomes()))
        gen_n += 1
        p = Population(fitness, ga.get_population())
        print(f'Gen{gen_n} CoutCH {p.get_len_generation()} SumFiness {int(p.get_sum_fitness())} avrTime {round(p.get_avr_time(),2)} maxTime {p.get_max_time()} avrLen {round(p.get_avr_len(),3)} maxLen {p.get_max_len()} {p.count_death()}')


    print('!!!end!!!')
if __name__ == "__main__":
    main()

# import Game
# import pyann
#
# SNAKE_COUNT = 250
# CUT_OFF = 0.46
# WEIDTH = 400
# HEIGHT = 400
# SHAPE_NETURAL_NETWORK = (24, 16, 12, 3)
#
# ACTIVATION_FUNCTION = 'RELu'
# NumberOfGeneration = 160000
# # (3, 12, 'w', 12)
#
# def fitness(par):
#     l = par[0]
#     t = par[1]
#     d = par[2]
#
#     c = par[3] # number of changed direction
#     #return (l ** 2) * t * c - (5 * t if (d == 'w' and d != 'c') else t * 0.5)
#     # return 10 * l ** 6 + t - (t ** 2) / (l - 2) ** 3
#     return t + (2 ** (l-2) + 500 * (l-2) ** 2.1) - ((l-2)**1.2 * (0.25 * t) ** 1.3)
#
# game1 = Game.Game(WEIDTH, HEIGHT, False)
# #game1.add_snakes(2000,(SHAPE_NETURAL_NETWORK,ACTIVATION_FUNCTION, True))
# #game1.add_snakes(1,'HUMAN')
# #game1.run(CUT_OFF)
#
# generation = []
# generation2 =[]
# cm = []
# i=0
# while len(generation) < SNAKE_COUNT:
#       game1.clear_snakes()
#       game1.add_snakes(1500, (SHAPE_NETURAL_NETWORK, ACTIVATION_FUNCTION, True))
#       game1.run(CUT_OFF)
#       tmp = game1.get_population()
#
#       l = list(filter(lambda x: x[1][0] >= 4 and x[1][3] != 0, game1.get_population()))
#       if len(l) >= 1:
#          generation.extend(l)
#          i += 1
#       #print(f'{len(generation)}  {i}')
#
# game1.clear_snakes()
# for g in generation[:SNAKE_COUNT]:
#      game1.add_snakes(1, (SHAPE_NETURAL_NETWORK, ACTIVATION_FUNCTION, True, g))
#
# learning = pyann.GeneticAlgorithm(0.3, 0.04, fitness, SNAKE_COUNT)
# f = open("stat.txt",'w+')
# k = 0
# i = 0
# while i <= (NumberOfGeneration):
#     game1.run(CUT_OFF)
#
#     temp_pop = game1.get_population()
#
#     learning.update_population(temp_pop)
#
#     print(f'{i} Gen{k}({len(generation2)})  NumPop {learning.get_len_generation()} SumFiness {int(sum(learning.get_fitness))} avrTime {round(learning.get_avr_time(),2)} maxTime {learning.get_max_time()} avrLen {round(learning.get_avr_len(),3)} maxLen {learning.get_max_len()}')
#     f.write(f'\n{i}  SumFitness {round(sum(learning.get_fitness),2)} avrTime {round(learning.get_avr_time(),2)} maxTime {learning.get_max_time()} avrLen {round(learning.get_avr_len(),4)} maxLen {learning.get_max_len()} \n {learning.get_best_chromosome()}')
#
#
#     if len(generation2) >= 100 and k != 10:
#         learning.add_population(generation2)
#         i = 0
#         k += 1
#         generation2 =[]
#
#     cm = learning.crossover_mutation()
#     game1.clear_snakes()
#     for p in cm:
#         game1.add_snakes(1, (SHAPE_NETURAL_NETWORK, ACTIVATION_FUNCTION, True, p))
#     game1.run(CUT_OFF)
#
#     learning.add_population(game1.get_population())
#     game1.clear_snakes()
#     for p in learning.next_population():
#         game1.add_snakes(1, (SHAPE_NETURAL_NETWORK, ACTIVATION_FUNCTION, True, p))
#     i += 1
